name: SCANOSS WorkFlow Demo  # Workflow name.

on:
  push:
    branches:
      - '*'  # Runs the workflow on any branch push

jobs:
  scan-and-generate-sbom:
    runs-on: ubuntu-latest  # Specifies the runner environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4  # Checks out repository code

      - name: Log in to GitHub Docker Registry
        if: env.DOCKER_AUTH_REQUIRED == 'true'  # Conditional login if Docker authentication is required
        run: |
          echo "üîë Logging into GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "‚úÖ Login successful."

      - name: Run SCANOSS Analysis for License - Encryption - Vulnerabilities
        run: |
          echo "üöÄ Pulling SCANOSS Docker image..."
          docker pull ghcr.io/scanoss/scanoss-py:v1.19.0

          echo "üìä Running SCANOSS scan for license, encryption, and vulnerabilities..."
          docker run --rm -v $(pwd):/scanoss ghcr.io/scanoss/scanoss-py:latest scan ./ --key txnUfW0xwF0KI1U1RW5sDSBL --format cyclonedx -o cycloneDX.json
          echo "‚úÖ SCANOSS scan completed."

          echo "üîç Running SCANOSS cryptography component analysis..."
          docker run --rm -v $(pwd):/scanoss ghcr.io/scanoss/scanoss-py:latest comp crypto --key txnUfW0xwF0KI1U1RW5sDSBL --purl pkg:github/heimdal/heimdal > crypto_results.txt
          docker run --rm -v $(pwd):/scanoss ghcr.io/scanoss/scanoss-py:latest comp prov -o prov_results.txt
          echo "‚úÖ Cryptography analysis completed."

      - name: Upload SBOM Results
        uses: actions/upload-artifact@v4  # Stores artifacts for use in later jobs
        with:
          name: scanoss-results
          path: |
            ./cycloneDX.json
            ./crypto_results.txt  # Uploads both SBOM and cryptography results

  process-vulnerabilities:
    runs-on: ubuntu-latest
    needs: scan-and-generate-sbom  # Ensures this job runs only after SBOM generation is complete

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download SBOM Results
        uses: actions/download-artifact@v4
        with:
          name: scanoss-results  # Retrieves the previously generated SBOM and crypto results
          path: ./

      - name: Install Python Dependencies
        run: |
          echo "üì¶ Installing required Python dependencies..."
          python -m pip install --upgrade pip
          pip install pandas requests tabulate matplotlib kaleido numpy
          echo "‚úÖ Dependencies installed."

      - name: Process EPSS, KEV, and NVD Data
        run: |
          echo "üìú Checking if vulnerability processing script exists..."
          if [ ! -f scripts/epss.py ]; then
            echo "‚ùå Error: scripts/epss.py not found!"
            exit 1
          fi

          echo "‚öôÔ∏è Running the EPSS vulnerability processing script..."
          python scripts/epss.py
          echo "‚úÖ Processing completed."

      - name: Check Generated Vulnerability Report
        run: |
          echo "üìã Validating the generated vulnerability report..."
          if [ ! -f vulnerability_report.json ]; then
            echo "‚ùå Error: vulnerability_report.json not found!"
            exit 1
          fi
          echo "‚úÖ Vulnerability report found and validated."

      - name: Upload Enriched Vulnerability Data
        uses: actions/upload-artifact@v4  # Stores the vulnerability report for later use
        with:
          name: enriched-vulnerability-data
          path: vulnerability_report.json

  generate-summary:
    runs-on: ubuntu-latest
    needs: process-vulnerabilities  # Ensures this job runs only after vulnerability processing

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Enriched Vulnerability Data
        uses: actions/download-artifact@v4
        with:
          name: enriched-vulnerability-data  # Retrieves the processed vulnerability report
          path: ./

      - name: Install Python Dependencies
        run: |
          echo "üì¶ Installing Python libraries for report generation..."
          python -m pip install --upgrade pip
          pip install numpy matplotlib pandas
          echo "‚úÖ Dependencies installed."

      - name: Upload Summary Report
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-summary
          path: reports/

      - name: Append Summary to GitHub Summary
        run: |
          echo "üìÑ Checking for summary.md in reports/..."
          if [ -f reports/summary.md ]; then
            echo "‚úÖ summary.md found in reports/! Appending to GitHub summary..."
            cat reports/summary.md >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Error: summary.md not found! Debugging..."
            ls -lah reports/  # Debugging step: list files in the directory
            exit 1
          fi
