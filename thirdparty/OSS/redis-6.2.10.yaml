# This is Unguarded package we provide for the customer, customer has been informed that this image will have CVEs.
# The customer asked for a specific version of redis which is 6.2.10 so we disabled the updates for the customer to avoid any unexpected changes
package:
  name: redis-6.2.10
  version: 6.2.10
  epoch: 0
  description: Advanced key-value store
  copyright:
    - license: BSD-3-Clause
  dependencies:
    runtime:
      - posix-libc-utils # `getent` is required on startup in ha mode for ip introspection cluster formation

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - busybox
      - ca-certificates-bundle
      - linux-headers
      - openssl-dev

pipeline:
  - uses: fetch
    with:
      uri: https://download.redis.io/releases/redis-${{package.version}}.tar.gz
      expected-sha512: 307d7e8f2d07ed82c64959dc56847be5a1d7cc17e04cc9a7266053d61221f782acadbb26662eab60751fcbc1be6b0f2e03b688972308dfcb47511bc9f35bb27a

  - uses: patch
    with:
      patches: 0000-Disable-protected-mode.patch

  - runs: |
      export CFLAGS="$CFLAGS -DUSE_MALLOC_USABLE_SIZE"
        make USE_JEMALLOC=no \
        MALLOC=libc \
        BUILD_TLS=yes \
        all -j$(nproc)
      make install PREFIX=/usr INSTALL_BIN="${{targets.destdir}}/usr/bin"

  - uses: strip

subpackages:
  - name: ${{package.name}}-cli
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/redis-cli "${{targets.subpkgdir}}"/usr/bin/redis-cli
    description: redis-cli is the command line interface utility to talk with Redis.

  - name: ${{package.name}}-benchmark
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/redis-benchmark "${{targets.subpkgdir}}"/usr/bin/redis-benchmark
    description: redis-benchmark utility that simulates running commands done by N clients while at the same time sending M total queries.

  - name: ${{package.name}}-bitnami-compat
    dependencies:
      runtime:
        - libxcrypt
        - redis-6.2.10
        # Required by startup scripts
        - busybox
        - bash
        - coreutils
        - openssl
        - redis-6.2.10-cli
    pipeline:
      - uses: bitnami/compat
        with:
          image: redis
          version-path: 6.2/debian-12
      - runs: |
          # Bitnami startup scripts _require_ the redis-default.conf to exist
          mkdir -p "${{targets.subpkgdir}}"/opt/bitnami/redis/etc
          cp redis.conf ${{targets.subpkgdir}}/opt/bitnami/redis/etc/redis-default.conf

          ln -s /opt/bitnami/scripts/redis/entrypoint.sh ${{targets.subpkgdir}}/entrypoint.sh
          ln -s /opt/bitnami/scripts/redis/run.sh ${{targets.subpkgdir}}/run.sh

  # redis-sentinel is a symlink to redis-server, but paired with differently named startup scripts in bitnami
  # keep this as a subpackage in redis to avoid confusion
  - name: redis-sentinel-6.2.10-bitnami-compat
    dependencies:
      runtime:
        - libxcrypt
        - redis-6.2.10
        # Required by startup scripts
        - busybox
        - bash
        - coreutils
        - openssl
        - redis-6.2.10-cli
    pipeline:
      - uses: bitnami/compat
        with:
          image: redis-sentinel
          version-path: 6.2/debian-12
      - runs: |
          # Bitnami startup scripts _require_ the redis-default.conf to exist
          mkdir -p "${{targets.subpkgdir}}"/opt/bitnami/redis-sentinel/etc
          cp redis.conf ${{targets.subpkgdir}}/opt/bitnami/redis-sentinel/etc/redis-default.conf

  # in bitnami, redis-cluster is redis-server paired with different startup to support cluster mode
  # keep this as a subpackage in redis to avoid confusion
  - name: ${{package.name}}-cluster-6.2.10-bitnami-compat
    dependencies:
      runtime:
        - libxcrypt
        - redis-6.2.10
        # Required by startup scripts
        - busybox
        - bash
        - coreutils
        - openssl
        - redis-6.2.10-cli
    pipeline:
      - uses: bitnami/compat
        with:
          image: redis-cluster
          version-path: 6.2/debian-12
      - runs: |
          # Bitnami startup scripts _require_ the redis-default.conf to exist
          mkdir -p "${{targets.subpkgdir}}"/opt/bitnami/redis-cluster/etc
          cp redis.conf ${{targets.subpkgdir}}/opt/bitnami/redis-cluster/etc/redis-default.conf

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-cli
        - ${{package.name}}-benchmark
  pipeline:
    - runs: |
        # Define the Redis server host and port
        REDIS_HOST="127.0.0.1"
        REDIS_PORT="6379"

        # Function to check if Redis server is running
        check_redis_server() {
          echo "Checking if Redis server is running..."
          if redis-cli -h $REDIS_HOST -p $REDIS_PORT ping | grep -q "PONG"; then
            echo "Redis server is running."
          else
            echo "Redis server is not running. Starting Redis server..."
            redis-server --daemonize yes
            sleep 2
            if redis-cli -h $REDIS_HOST -p $REDIS_PORT ping | grep -q "PONG"; then
              echo "Redis server started successfully."
            else
              echo "Failed to start Redis server. Exiting..."
              exit 1
            fi
          fi
        }

        # Function to test redis-cli
        test_redis_cli() {
          echo "Testing redis-cli..."

          # Set a key-value pair
          redis-cli -h $REDIS_HOST -p $REDIS_PORT SET test_key "Hello, Redis!"

          # Get the value of the key
          VALUE=$(redis-cli -h $REDIS_HOST -p $REDIS_PORT GET test_key)
          echo "Value of test_key: $VALUE"

          # Check if the value is as expected
          if [ "$VALUE" == "Hello, Redis!" ]; then
            echo "redis-cli test passed."
          else
            echo "redis-cli test failed."
          fi
        }

        # Function to run redis-benchmark
        run_redis_benchmark() {
          echo "Running redis-benchmark..."
          redis-benchmark -h $REDIS_HOST -p $REDIS_PORT -q
        }

        # Main script execution
        check_redis_server
        test_redis_cli
        run_redis_benchmark

        echo "All tests completed."
        redis-sentinel --version
        redis-server --version

update:
  enabled: false
  exclude-reason: |
    customer asked for a specific version of redis which is 6.2.10, this is why we disabled the updates for more context: https://github.com/chainguard-dev/image-requests/issues/2234
