## go-openssl-1.23 is vanilla-build of golang-fips/go patches that
## produce binaries that can opt-in/out of FIPS mode, or require
## non-FIPS altogether. This one is only shipped as an image to
## customers as 3rd party software, not to be used to build any wolfi
## packages. this package uses the patches from the go-fips-1.23
## package, which are symlinked to the ./go-openssl-1.23 directory.
package:
  name: go-openssl-1.23
  version: "1.23.5"
  epoch: 0
  description: "pure unpatched https://github.com/golang-fips/go toolchain"
  copyright:
    - license: BSD-3-Clause
  dependencies:
    provides:
      - go-openssl=${{package.full-version}}
    runtime:
      - '!go-1.23'
      - bash
      - binutils-gold # Needed for cgo linking due to upstream issue #15696 which forces use of the gold linker.
      - build-base

vars:
  # https://github.com/chainguard-images/images-private/pull/2752/files
  # uses a different symbol ('_Cfunc__goboringcrypto_')
  uses-boring-crypto-symbol: "v2._Cfunc_go_openssl"

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      # We always use the equivalent non-FIPS branch of Go to build this.
      - go~1.23
      - openssl-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/golang/go
      tag: go${{package.version}}
      destination: go
      expected-commit: d04e3cbc9240e25de449dcae2ec33d03062f347b

  # patches directly from openssl-fips/patches, skipping:
  # - 017-fix-linkage.patch breaks coverage for now TODO backport FNV-1 patch
  - working-directory: /home/build/go
    pipeline:
      - uses: patch
        with:
          patches: /home/build/golang-fips/000-initial-setup.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/001-initial-openssl-for-fips.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/002-strict-fips-runtime-detection.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/003-init-openssl-v2-backend.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/004-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/005-fixes-2.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/006-fixes-3.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/007-fixes-4.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/008-fixes-5.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/009-fixes-6.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/010-fixes-7.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/011-122-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/012-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/013-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/014-fix-RHEL-34924.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/015-add-hash-sign-verify.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/018-fix-std-crypto.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/019-fix-vendor-test.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/020-fix-boring-tls.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/021-fix-index-error.patch
      - uses: patch
        with:
          patches: |
            ../extra/change-default-telemetry-from-local-to-off.patch

  - runs: |
      cd go/src
      ./make.bash -v

  - runs: |
      cd go

      mkdir -p "${{targets.destdir}}"/usr/bin "${{targets.destdir}}"/usr/lib/go/bin "${{targets.destdir}}"/usr/share/doc/go

      for bin in go gofmt; do
        install -Dm755 bin/$bin "${{targets.destdir}}"/usr/lib/go/bin/$bin
        ln -s /usr/lib/go/bin/$bin "${{targets.destdir}}"/usr/bin/
      done

      cp -a pkg lib "${{targets.destdir}}"/usr/lib/go/
      cp -r doc misc "${{targets.destdir}}"/usr/share/doc/go
      cp -a src "${{targets.destdir}}"/usr/lib/go/
      cp -p go.env "${{targets.destdir}}"/usr/lib/go/go.env

      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/obj
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/bootstrap
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/api
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/*/cmd
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/api
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/go_bootstrap
      rm -rf "${{targets.destdir}}"/usr/lib/go/src/cmd/dist/dist

      # Remove tests from /usr/lib/go/src, not needed at runtime
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*_test.go" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type d -a -name "testdata" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.rc" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.bat" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.pem" \) \
        -exec rm -rf \{\} \+

  - uses: strip

subpackages:
  - name: "${{package.name}}-doc"
    description: "go documentation"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share
          mv "${{targets.destdir}}"/usr/share/doc "${{targets.subpkgdir}}"/usr/share/

update:
  enabled: true
  shared: true
  github:
    identifier: golang/go
    strip-prefix: go
    tag-filter: go1.23
    use-tag: true

test:
  pipeline:
    - runs: |
        export HOME=$PWD
        export GOPATH=$PWD
        go version
        cat <<EOF >> /tmp/main.go
        package main

        import "fmt"

        func main() {
                fmt.Println("Hello Wolfi")
        }
        EOF
        go run /tmp/main.go
        go help
        gofmt --help
    - name: "sha256 test"
      runs: |
        fail() { echo "$@" 1>&2; exit 1; }
        export HOME=$PWD
        export GOPATH=$PWD

        mkdir sha256
        cd sha256
        cat >sha256.go <<"EOF"
        package main

        import (
            "crypto/sha256"
            "fmt"
            "os"
        )

        func main() {
            fmt.Printf("%x\n", sha256.Sum256([]byte(os.Args[1])))
        }
        EOF

        go mod init example.com/go/sha256
        go mod tidy

        CGO_ENABLED=1 go build .

        go tool nm ./sha256 > nm.out
        if ! grep -q "${{vars.uses-boring-crypto-symbol}}" nm.out; then
            echo "built sha256 was missing ${{vars.uses-boring-crypto-symbol}} symbol"
            cat nm.out
            exit 1
        fi

        # vanilla golang-fips/go allows the caller to control behavior
        # https://github.com/golang-fips/go/blob/8092b8157908b59e5930a1247b6f41842a25f89e/patches/003-init-openssl-v2-backend.patch
        # + // 0: FIPS opt-out: abort the process if it is enabled and can't be disabled.
        # + // 1: FIPS required: abort the process if it is not enabled and can't be enabled.
        run_test() {
          local gfval="$1" exrc="$2" msg="$3" rc=""
          shift 3
          # env -i cleans environment
          set -- env -i ${gfval:+"GOLANG_FIPS=$gfval"} ./sha256 "Go Cubs Go"
          echo "$msg"
          echo "execute:" "$@"
          "$@" >sha256.out 2>&1 && rc=0 || rc=$?
          echo "expected rc=$exrc found=$rc"
          if [ "$exrc" != "$rc" ]; then
              cat sha256.out
              fail "ERROR: sha256 ran and exited $exrc when GOLANG_FIPS=$gfval. expected $rc."
          fi
        }

        set +x
        run_test 0  0 "GOLANG_FIPS=0 should run fine outside fips environment"
        run_test "" 0 "unset GOLANG_FIPS should run fine outside fips environment"
        run_test 1  2 "GOLANG_FIPS=1 should fail outside fips environment"
    - name: Test telemetry settings - should be off by default.
      runs: |
        fail() { echo "FAIL:" "$@" 1>&2; exit 1; }

        tmpd=$(mktemp -d)
        trap "rm -R '$tmpd'" EXIT
        export HOME="$tmpd/home"
        mkdir "$HOME"

        out=$(go telemetry) || fail "'go telemetry' exited $?"
        [ "$out" = "off" ] ||
          fail "go telemetry output '$out'. expected 'off'"

        cfgdir="$HOME/.config/go/telemetry"
        if [ -d "$cfgdir" ]; then
          fail "$cfgdir was created by running 'go telemetry'"
        fi

        go telemetry on ||
          fail "'go telemetry on' exited $?"
        out=$(go telemetry) || fail "'go telemetry' after 'on' exited $?"
        [ "$out" = "on" ] ||
          fail "go telemetry after 'on' output '$out'. expected 'on'"

        [ -f "$cfgdir/mode" ] ||
          fail "ERROR: 'go telemetry on' did not write ~/${cfgdir#$HOME/}"

        go telemetry local ||
          fail "'go telemetry local' exited $?"
        out=$(go telemetry) || fail "'go telemetry' after 'local' exited $?"
        [ "$out" = "local" ] ||
          fail "go telemetry after 'local' output '$out'. expected 'local'"

        go telemetry off ||
          fail "explicit 'go telemetry off' exited $?"
        out=$(go telemetry) || fail "'go telemetry' after explicit off exited $?"
        [ "$out" = "off" ] ||
          fail "go telemetry after explicit off output '$out'. expected 'off'"
