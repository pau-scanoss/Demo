# NB! this source patches are also used by go-openssl-1.22
package:
  name: go-fips-1.22
  version: "1.22.11"
  epoch: 0
  description: "the Go programming language"
  copyright:
    - license: BSD-3-Clause
  dependencies:
    provider-priority: 10
    provides:
      - go-fips=${{package.full-version}}
      - go-fips-md5=${{package.full-version}}
    runtime:
      - '!go-1.22'
      - bash
      - binutils-gold # Needed for cgo linking due to upstream issue #15696 which forces use of the gold linker.
      - build-base

vars:
  # https://github.com/chainguard-images/images-private/pull/2752/files
  # uses a different symbol ('_Cfunc__goboringcrypto_')
  uses-boring-crypto-symbol: "v2._Cfunc_go_openssl"

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      # We always use the equivalent non-FIPS branch of Go to build this.
      - go~1.22
      - openssl-dev
      - openssl-config-fipshardened # New patches enable go in fips mode

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/golang/go
      tag: go${{package.version}}
      destination: go
      expected-commit: f07288435495dccb05217b6012ecb2b7a5b521ab

  # patches directly from openssl-fips/patches, skipping:
  # - 017-fix-linkage.patch breaks coverage for now TODO backport FNV-1 patch
  - working-directory: /home/build/go
    pipeline:
      - uses: patch
        with:
          patches: /home/build/golang-fips/000-initial-setup.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/001-initial-openssl-for-fips.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/002-strict-fips-runtime-detection.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/003-init-openssl-v2-backend.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/004-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/005-fixes-2.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/006-fixes-3.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/007-fixes-4.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/008-fixes-5.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/009-fixes-6.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/010-fixes-7.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/011-122-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/012-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/013-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/014-fix-RHEL-34924.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/015-add-hash-sign-verify.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/016-fix-crashdumpallthreads.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/018-fix-std-crypto.patch

  # now the extra patches
  - working-directory: /home/build/go
    pipeline:
      - uses: patch
        with:
          patches: /home/build/extra/0001-openssl-fips-unconditionally-use-openssl-backend.patch
      - uses: patch
        with:
          patches: /home/build/extra/0002-boring-always-enable-access-to-boring.Enabled-functi.patch
      - uses: patch
        with:
          patches: /home/build/extra/cmd-go-always-emit-ldflags-version-information.patch

  - runs: |
      cd go/src
      GOEXPERIMENT=boringcrypto ./make.bash -v

  - runs: |
      cd go

      mkdir -p "${{targets.destdir}}"/usr/bin "${{targets.destdir}}"/usr/lib/go/bin "${{targets.destdir}}"/usr/share/doc/go

      for bin in go gofmt; do
        install -Dm755 bin/$bin "${{targets.destdir}}"/usr/lib/go/bin/$bin
        ln -s /usr/lib/go/bin/$bin "${{targets.destdir}}"/usr/bin/
      done

      cp -a pkg lib "${{targets.destdir}}"/usr/lib/go/
      cp -r doc misc "${{targets.destdir}}"/usr/share/doc/go
      cp -a src "${{targets.destdir}}"/usr/lib/go/
      cp -p go.env "${{targets.destdir}}"/usr/lib/go/go.env

      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/obj
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/bootstrap
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/api
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/*/cmd
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/api
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/go_bootstrap
      rm -rf "${{targets.destdir}}"/usr/lib/go/src/cmd/dist/dist

      # Remove tests from /usr/lib/go/src, not needed at runtime
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*_test.go" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type d -a -name "testdata" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.rc" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.bat" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.pem" \) \
        -exec rm -rf \{\} \+

  - uses: strip

subpackages:
  - name: "${{package.name}}-doc"
    description: "go documentation"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share
          mv "${{targets.destdir}}"/usr/share/doc "${{targets.subpkgdir}}"/usr/share/

update:
  enabled: true
  shared: true
  github:
    identifier: golang/go
    strip-prefix: go
    tag-filter: go1.22
    use-tag: true

test:
  environment:
    contents:
      packages:
        - openssl-config-fipshardened
  pipeline:
    - runs: |
        export HOME=$PWD
        export GOPATH=$PWD
        go version
        cat <<EOF >> /tmp/main.go
        package main

        import "fmt"

        func main() {
                fmt.Println("Hello Wolfi")
        }
        EOF
        go run /tmp/main.go
        go help
        gofmt --help
    - name: "sha256 test"
      runs: |
        fail() { echo "$@" 1>&2; exit 1; }
        export HOME=$PWD
        export GOPATH=$PWD

        mkdir sha256
        cd sha256
        cat >sha256.go <<"EOF"
        package main

        import (
            "crypto/sha256"
            "fmt"
            "os"
        )

        func main() {
            fmt.Printf("%x\n", sha256.Sum256([]byte(os.Args[1])))
        }
        EOF

        go mod init example.com/go/sha256
        go mod tidy

        CGO_ENABLED=1 go build .

        go tool nm ./sha256 > nm.out
        if ! grep -q "${{vars.uses-boring-crypto-symbol}}" nm.out; then
            echo "built sha256 was missing ${{vars.uses-boring-crypto-symbol}} symbol"
            cat nm.out
            exit 1
        fi

        # go is now built in fips mode, mock lack of openssl fips
        # provider with an empty openssl.conf
        OPENSSL_CONF=/dev/null ./sha256 "Go Cubs Go" > sha256.out 2>&1 && rc=0 || rc=$?
        [ $rc -eq 0 ] && fail "ERROR: sha256 ran successfully without fips provider"
        [ $rc -eq 2 ] || { cat sha256.out; fail "ERROR: expected rc=2 found rc=$rc:"; }
        grep -q "panic.*opensslcrypto" sha256.out || {
          cat sha256.out
          fail "sha256 output did not contain panic.*opensslcrypto"
        }
    - name: "parallel decrypt test"
      runs: |
        fail() { echo "$@" 1>&2; exit 1; }
        export HOME=$PWD
        export GOPATH=$PWD
        cat <<EOF >> /tmp/test-parallel-decrypt.go
        // Test case from https://github.com/golang-fips/go/issues/187
        package main

        import (
                "crypto/aes"
                "crypto/cipher"
                "crypto/rand"
                "flag"
                "log"
                "os"
                "time"
        )

        func main() {
                numThreads := flag.Int("threads", 8, "number of threads")
                timeout := flag.Int("timeout", 10,
                        "time to run for (considered success if no panics before then")
                flag.Parse()

                log.Printf("Starting parallel GCM decrypt with %d threads for %ds", *numThreads, *timeout)

                var key [32]byte
                if _, err := rand.Read(key[:]); err != nil {
                        panic(err)
                }
                block, err := aes.NewCipher(key[:])
                if err != nil {
                        panic(err)
                }
                gcm, err := cipher.NewGCM(block)
                if err != nil {
                        panic(err)
                }
                nonce := make([]byte, gcm.NonceSize())
                if _, err := rand.Read(nonce[:]); err != nil {
                        panic(err)
                }
                ciphertext := gcm.Seal(nil, nonce, []byte("hunter2"), nil)

                for parallel := 0; parallel < *numThreads; parallel++ {
                        go func() {
                                for {
                                        if _, err := gcm.Open(nil, nonce, ciphertext, nil); err != nil {
                                                panic(err)
                                        }
                                }
                        }()
                }
                <-time.After(time.Duration(*timeout) * time.Second)
                log.Printf("Ran successfully for %d seconds. Exiting 0.", *timeout)
                os.Exit(0)
        }
        EOF
        go run /tmp/test-parallel-decrypt.go >decrypt.out 2>&1 || {
            rc=$?
            cat decrypt.out
            fail "test-parallel-decrypt.go exited $rc"
        }
