package:
  name: adoptium-openjdk-8
  version: 8.422.05 # this corresponds to same release as jdk8u422-ga / jdk8u422-b05_adopt
  epoch: 0
  description: "OpenJDK 8"
  copyright:
    - license: GPL-2.0-or-later
  dependencies:
    runtime:
      - java-cacerts
      - adoptium-openjdk-8-jre

environment:
  contents:
    packages:
      - alsa-lib-dev
      - attr-dev
      - autoconf
      - automake
      - bash
      - build-base
      - ca-certificates
      - cairo-dev
      - coreutils
      - cups-dev
      - expat-dev
      - file
      - findutils
      - fontconfig-dev
      - freetype-dev
      - fribidi-dev
      - gawk
      - gdk-pixbuf-dev
      - giflib-dev
      - glib-dev
      - gtk-2.0-dev
      - harfbuzz-dev
      - krb5-dev
      - lcms2-dev
      - libffi-dev
      - libice-dev
      - libjpeg-turbo-dev
      - libpng-dev
      - libtool
      - libx11-dev
      - libxcomposite-dev
      - libxext-dev
      - libxft-dev
      - libxi-dev
      - libxinerama-dev
      - libxrandr-dev
      - libxrender-dev
      - libxslt-dev
      - libxt-dev
      - libxtst-dev
      - linux-headers
      - openjdk-7-default-jdk
      - pango-dev
      - patch
      - pkgconf-dev
      - posix-libc-utils
      - sed
      - util-linux-dev
      - wolfi-base
      - zip
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/adoptium/jdk8u.git
      tag: jdk8u422-b05_adopt
      expected-commit: 33e5234fe2ce5f97408e272161d46dcf48bc539f

  - uses: patch
    with:
      patches: JDK-8281098.patch

  - runs: chmod +x configure

  # Note that despite using --with-extra-cflags, --with-extra-cxxflags, and
  # --with-extra-ldflags, the configure still produces warnings like:
  # https://github.com/wolfi-dev/os/issues/18747
  - runs: |
      export EXTRA_CFLAGS="-Wno-complain-wrong-lang -Wformat -Wno-cpp -Wno-error -fno-delete-null-pointer-checks -fno-lifetime-dse -fno-strict-overflow"
      export EXTRA_CPP_FLAGS="-Wno-complain-wrong-lang -Wno-cpp -fno-delete-null-pointer-checks -fno-lifetime-dse -fno-strict-overflow"
      CFLAGS='' CXXFLAGS='' LDFLAGS='' \
      bash ./configure \
        --with-extra-cflags="$EXTRA_CFLAGS" \
        --with-extra-cxxflags="$EXTRA_CPP_FLAGS" \
        --with-extra-ldflags="$LDFLAGS" \
        --with-boot-jdk=/usr/lib/jvm/java-1.7-openjdk \
        --prefix=/usr/lib/jvm/java-1.8-adoptium \
        --with-vendor-name=wolfi \
        --with-vendor-url=https://wolfi.dev \
        --with-vendor-bug-url=https://github.com/wolfi-dev/os/issues \
        --with-update-version="wolfi-r${{package.epoch}}" \
        --disable-precompiled-headers \
        --with-zlib=system \
        --with-debug-level=release \
        --with-native-debug-symbols=internal \
        --with-jvm-variants=server \
        --with-jtreg=no  \
        --with-jvm-variants=server \
        --with-giflib=system

  - runs: make images SHELL=/bin/bash

  - runs: |
      _java_home="usr/lib/jvm/java-1.8-adoptium"

      mkdir -p "${{targets.destdir}}"/$_java_home
      cp -a build/*-normal-server-release/images/j2sdk-image/* "${{targets.destdir}}"/$_java_home
      rm "${{targets.destdir}}"/$_java_home/src.zip


      # This archive contains absolute paths from the build environment,
      # so it does not work on the target system. User can generate it
      # running 'java -Xshare:dump'.
      rm -f "${{targets.destdir}}"/$_java_home/server/classes.jsa

  - uses: strip

subpackages:
  - name: "${{package.name}}-jre"
    description: "OpenJDK 8 Java Runtime Environment"
    dependencies:
      runtime:
        - java-common
        - java-cacerts
    pipeline:
      - runs: |
          _java_home="usr/lib/jvm/java-1.8-adoptium"
          mkdir -p "${{targets.subpkgdir}}"/$_java_home

          mv "${{targets.destdir}}"/$_java_home/jre \
              "${{targets.subpkgdir}}"/$_java_home

          mv "${{targets.destdir}}"/$_java_home/lib \
              "${{targets.subpkgdir}}"/$_java_home

          # move jre executables expected by java-common
          mkdir -p "${{targets.subpkgdir}}"/$_java_home/bin
          for file in java orbd rmid servertool unpack200 keytool \
                pack200 rmiregistry tnameserv; do
            mv "${{targets.destdir}}"/$_java_home/bin/$file "${{targets.subpkgdir}}"/$_java_home/bin/
          done

  - name: "${{package.name}}-doc"
    description: "OpenJDK 8 Documentation"
    pipeline:
      - runs: |
          _java_home="usr/lib/jvm/java-1.8-adoptium"
          mkdir -p "${{targets.subpkgdir}}"/$_java_home
          mv "${{targets.destdir}}"/$_java_home/man \
             "${{targets.subpkgdir}}"/$_java_home

  - name: "${{package.name}}-demos"
    description: "OpenJDK 8 Demos"
    pipeline:
      - runs: |
          _java_home="usr/lib/jvm/java-1.8-adoptium"
          mkdir -p "${{targets.subpkgdir}}"/$_java_home
          mv "${{targets.destdir}}"/$_java_home/demo \
             "${{targets.subpkgdir}}"/$_java_home

  - name: "${{package.name}}-default-jvm"
    description: "Use the ${{package.name}} JVM as the default JVM"
    dependencies:
      runtime:
        - ${{package.name}}-jre
      provides:
        - default-jvm=1.8
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm
          ln -sf java-1.8-adoptium "${{targets.subpkgdir}}"/usr/lib/jvm/default-jvm

  - name: "${{package.name}}-default-jdk"
    description: "Use the ${{package.name}} JVM as the default JVM with the JDK installed"
    dependencies:
      runtime:
        - ${{package.name}}-default-jvm
        - ${{package.name}}
      provides:
        - default-jdk=1.8

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-default-jdk
    environment:
      JAVA_HOME: /usr/lib/jvm/java-8-adoptium
  pipeline:
    - name: "Java version Test"
      runs: |
        java -version
    # Test a basic Hello World
    - working-directory: basic
      runs: |
        javac HelloWorld.java
        java HelloWorld | grep -qi "Hello World!"
    # Test a basic HTTP connection
    - working-directory: basic
      runs: |
        javac RequestTest.java
        java RequestTest | grep -qi "Successfully connected to example.org"

update:
  enabled: false
  exclude-reason: |
    "TODO(pnasrat): enable if this fixes performance regression with upstream"
