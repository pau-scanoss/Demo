# NOTE: This is a Java application which does not support FIPS mode, or provide
# a mechanism to replace / guarantee that only FIPS approved crypto libraries
# are used (Java applications can bundle their own crypto libraries). Therefore,
# THIS IS NOT A FIPS COMPLIANT JAVA PACKAGE. It does however include the bcfips
# JDK as a runtime dependency, only because customer(s) have requested this.
package:
  name: kafka-jre-bcfips
  # When bumping check to see if the CVE mitigation can be removed.
  version: 3.9.0
  epoch: 0
  description: Apache Kafka is a distributed event streaming platformm
  copyright:
    - paths:
        - "*"
      attestation:
      license: Apache-2.0
  dependencies:
    runtime:
      - bash # some helper scripts use bash
      - openjdk-11-jre-bcfips
      - openjdk-11-default-jvm-bcfips

environment:
  contents:
    packages:
      - busybox
      - bouncycastle-fips-1.0
      - ca-certificates-bundle
      - gradle
      - openjdk-11
  environment:
    JAVA_HOME: /usr/lib/jvm/java-11-openjdk
    LANG: en_US.UTF-8

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/apache/kafka
      tag: ${{package.version}}
      expected-commit: 84caaa6e9da06435411510a81fa321d4f99c351f

  - runs: |
      gradle clean releaseTarGz

      # Kill gradle daemon if still running
      gradle --stop

      tar -xf core/build/distributions/kafka_2.13-${{package.version}}.tgz

      mkdir -p ${{targets.destdir}}/usr/lib/kafka/logs

      mv kafka_2.13-${{package.version}}/bin ${{targets.destdir}}/usr/lib/kafka
      mv kafka_2.13-${{package.version}}/libs ${{targets.destdir}}/usr/lib/kafka
      mv kafka_2.13-${{package.version}}/config ${{targets.destdir}}/usr/lib/kafka

      # Clean up windows
      rm -rf ${{targets.destdir}}/usr/lib/kafka/bin/*.bat
      rm -rf ${{targets.destdir}}/usr/lib/kafka/bin/windows

      # Load bcfips
      ln -sf /usr/share/java/bouncycastle-fips/*.jar ${{targets.destdir}}/usr/lib/kafka/libs/

      # Disable FIPS approved only mode
      mv java.security ${{targets.destdir}}/usr/lib/kafka/config/

test:
  environment:
    contents:
      packages:
        - uuidgen
    environment:
      LANG: en_US.UTF-8
      JAVA_HOME: "/usr/lib/jvm/default-jvm"
  pipeline:
    - runs: |
        cd /usr/lib/kafka

        # Start ZooKeeper
        bin/zookeeper-server-start.sh config/zookeeper.properties &
        ZK_PID=$!

        # Start Kafka
        bin/kafka-server-start.sh config/server.properties &
        KAFKA_PID=$!
        sleep 5

        TOPIC_NAME="test-topic-$(uuidgen)"
        PARTITIONS=1
        REPLICATION_FACTOR=1

        # Create a Kafka topic
        bin/kafka-topics.sh --create --topic "${TOPIC_NAME}" --partitions "${PARTITIONS}" --replication-factor "${REPLICATION_FACTOR}" --if-not-exists --bootstrap-server localhost:9092

        # Produce a test message
        echo "Hello Kafka" | bin/kafka-console-producer.sh --broker-list localhost:9092 --topic "${TOPIC_NAME}"

        # Consume the message
        consumed_message=$(timeout 10 bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic "${TOPIC_NAME}" --from-beginning --max-messages 1)

        # Verify the message
        if [[ "${consumed_message}" == "Hello Kafka" ]]; then
          echo "Successfully produced and consumed a test message."
        else
          echo "Failed to verify the consumed message."
        fi

        # Clean up the test topic
        bin/kafka-topics.sh --delete --topic "${TOPIC_NAME}" --bootstrap-server localhost:9092

        # Kill Kafka and ZooKeeper
        kill "${KAFKA_PID}"
        kill "${ZK_PID}"

update:
  enabled: true
  github:
    identifier: apache/kafka
    use-tag: true
