package:
  name: kubernetes-fips-1.29
  version: "1.29.13"
  epoch: 0
  description: Production-Grade Container Scheduling and Management
  copyright:
    - license: Apache-2.0
  dependencies:
    provides:
      - kubernetes-fips=${{package.full-version}}

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - coreutils # needed for non busybox version of `mktemp`
      - findutils # needed for non busybox version of `xargs`
      - go-bindata
      - go-fips
      - grep
      - jq
      - libcap-utils
      - libcrypto3
      - libssl3
      - linux-headers
      - openssl-config-fipshardened
      - rsync

vars:
  components: "kubectl kubeadm kubelet kube-scheduler kube-proxy kube-controller-manager kube-apiserver"
  kubernetes-version: 1.29

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/kubernetes/kubernetes
      tag: v${{package.version}}
      expected-commit: 9a58e9398d4aa69d7ad40f40407e54b96025e0c5

  - uses: go/bump
    with:
      deps: |-
        go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc@v0.46.0
        go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc@v1.21.0
        go.opentelemetry.io/contrib/instrumentation/github.com/emicklei/go-restful/otelrestful@v0.46.1
        github.com/golang-jwt/jwt/v4@v4.5.1
        github.com/opencontainers/runc@v1.1.14
        golang.org/x/crypto@v0.31.0
        golang.org/x/net@v0.33.0

  # We need to disable the "-s" ldflags and CGO_ENABLED=0 for the build to be FIPS.
  - uses: go/remove-cgo-enabled-0
    with:
      files: hack/lib/golang.sh
      seds: |
        s,CGO_ENABLED=0[ ]*,,g
        s,-s -w,-w,g

  - runs: |
      # Use our Go version instead of downloading another one
      export FORCE_HOST_GO=true

      WHAT=""
      for c in ${{vars.components}} ; do
        WHAT="$WHAT cmd/$c"
      done

      make WHAT="$WHAT"

  - runs: |
      # We apply cap_net_bind_service so that kube-apiserver can be run as
      # non-root and still listen on port less than 1024
      setcap cap_net_bind_service=+ep _output/bin/kube-apiserver

  - runs: |
      mkdir -p "${{targets.destdir}}"/usr/bin/
      install -m755 _output/bin/* ${{targets.destdir}}/usr/bin/

      mkdir -p "${{targets.destdir}}"/etc/kubernetes

subpackages:
  - name: kubectl-fips-${{vars.kubernetes-version}}
    description: A command line tool for communicating with a Kubernetes API server
    dependencies:
      provides:
        - kubectl-fips=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kubectl ${{targets.subpkgdir}}/usr/bin/kubectl-${{vars.kubernetes-version}}

  - name: kubectl-bash-completion-fips-${{vars.kubernetes-version}}
    dependencies:
      runtime:
        - kubectl-fips-${{vars.kubernetes-version}}
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share/bash-completion/completions
          _output/bin/kubectl completion bash > "${{targets.subpkgdir}}"/usr/share/bash-completion/completions/kubectl-${{vars.kubernetes-version}}

  - name: kubeadm-fips-${{vars.kubernetes-version}}
    description: A tool for quickly installing Kubernetes and setting up a secure cluster
    dependencies:
      runtime:
        - iproute2
        - socat
        - ethtool
        - conntrack-tools
        - crictl
      provides:
        - kubeadm-fips=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kubeadm ${{targets.subpkgdir}}/usr/bin/kubeadm-${{vars.kubernetes-version}}

          mkdir -p "${{targets.subpkgdir}}"/usr/share/bash-completion/completions
          _output/bin/kubeadm completion bash > "${{targets.subpkgdir}}"/usr/share/bash-completion/completions/kubeadm

  - name: kubelet-fips-${{vars.kubernetes-version}}
    description: An agent that runs on each node in a Kubernetes cluster making sure that containers are running in a Pod
    dependencies:
      runtime:
        - ip6tables
      provides:
        - kubelet-fips=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kubelet ${{targets.subpkgdir}}/usr/bin/kubelet-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/lib/kubelet
          install -d ${{targets.subpkgdir}}/var/log/kubelet

  - name: kube-scheduler-fips-${{vars.kubernetes-version}}
    description: Kubernetes control plane component watching over pods on nodes
    dependencies:
      provides:
        - kube-scheduler-fips=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-scheduler ${{targets.subpkgdir}}/usr/bin/kube-scheduler-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/log/kube-scheduler

  - name: kube-proxy-fips-${{vars.kubernetes-version}}
    description: Kubernetes network proxy that runs on each node
    dependencies:
      provides:
        - kube-proxy-fips=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-proxy ${{targets.subpkgdir}}/usr/bin/kube-proxy-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/lib/kube-proxy
          install -d ${{targets.subpkgdir}}/var/log/kube-proxy

  - name: kube-controller-manager-fips-${{vars.kubernetes-version}}
    description: Kubernetes control plane component that runs controller processes
    dependencies:
      provides:
        - kube-controller-manager-fips=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-controller-manager ${{targets.subpkgdir}}/usr/bin/kube-controller-manager-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/log/kube-controller-manager

  - name: kube-apiserver-fips-${{vars.kubernetes-version}}
    description: Kubernetes control plane component exposing the Kubernetes API
    dependencies:
      provides:
        - kube-apiserver-fips=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-apiserver ${{targets.subpkgdir}}/usr/bin/kube-apiserver-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/log/kube-apiserver

  - range: components
    name: "${{range.key}}-fips-${{vars.kubernetes-version}}-default"
    description: "Makes this version of ${{range.key}} the default."
    dependencies:
      runtime:
        - ${{range.key}}-fips-${{vars.kubernetes-version}}
      provides:
        - ${{range.key}}-fips-default=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          ln -s ${{range.key}}-${{vars.kubernetes-version}} ${{targets.subpkgdir}}/usr/bin/${{range.key}}

  - name: kubernetes-fips-${{vars.kubernetes-version}}-default
    description: "Compatibility package to set 1.29 as the default kubernetes, and add packages to their shortened path"
    dependencies:
      runtime:
        - kubectl-fips-${{vars.kubernetes-version}}-default
        - kubeadm-fips-${{vars.kubernetes-version}}-default
        - kubelet-fips-${{vars.kubernetes-version}}-default
        - kube-scheduler-fips-${{vars.kubernetes-version}}-default
        - kube-proxy-fips-${{vars.kubernetes-version}}-default
        - kube-controller-manager-fips-${{vars.kubernetes-version}}-default
        - kube-apiserver-fips-${{vars.kubernetes-version}}-default
      provides:
        - kubernetes-fips-default=${{package.full-version}}
    checks:
      disabled:
        - empty
    test:
      pipeline:
        - runs: kubectl version | grep ${{package.version}}
        - uses: test/go-fips-check

data:
  - name: components
    items:
      # Only the keys matter
      kubectl:
      kubeadm:
      kubelet:
      kube-scheduler:
      kube-proxy:
      kube-controller-manager:
      kube-apiserver:

update:
  enabled: true
  github:
    identifier: kubernetes/kubernetes
    strip-prefix: v
    tag-filter: v1.29.
