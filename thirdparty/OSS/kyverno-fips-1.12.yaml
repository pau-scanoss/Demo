package:
  name: kyverno-fips-1.12
  version: "1.12.7"
  epoch: 0
  description: Kubernetes Native Policy Management
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - ca-certificates-bundle
    provides:
      - kyverno-fips=${{package.full-version}}

var-transforms:
  - from: ${{package.name}}
    match: '.*-(\d+\.\d+).*'
    replace: '$1'
    to: major-minor-version

environment:
  contents:
    packages:
      - git
      - go-fips
      - wolfi-baselayout
  environment:
    CGO_ENABLED: "1"

pipeline:
  - uses: git-checkout
    with:
      expected-commit: d33606477c5db36f58e818de4c42cff68b05eb4d
      repository: https://github.com/kyverno/kyverno
      tag: v${{package.version}}

  - uses: go/bump
    with:
      deps: |-
        github.com/Azure/azure-sdk-for-go/sdk/azidentity@v1.6.0
        go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp@v0.55.0
        go.opentelemetry.io/otel@v1.30.0
        go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc@v1.30.0
        go.opentelemetry.io/otel/exporters/otlp/otlptrace@v1.30.0
        go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc@v1.30.0
        go.opentelemetry.io/otel/exporters/prometheus@v0.52.0
        go.opentelemetry.io/otel/metric@v1.30.0
        go.opentelemetry.io/otel/sdk@v1.30.0
        go.opentelemetry.io/otel/sdk/metric@v1.30.0
        go.opentelemetry.io/otel/trace@v1.30.0
        github.com/open-policy-agent/opa@v0.68.0
        github.com/golang-jwt/jwt/v4@v4.5.1
        github.com/go-git/go-git/v5@v5.13.0

  - uses: patch
    # This patch (ideally) can be removed when a new release is cut by the kyverno maintainers.
    with:
      patches: update-otel-semconv-to-1.26.0.patch

  - uses: go/remove-cgo-enabled-0
    with:
      seds: |
        s,-s -w,-w,g

  - runs: |
      make build-all
      mkdir -p ${{targets.destdir}}/usr/bin
      install -Dm755 cmd/kyverno/kyverno ${{targets.destdir}}/usr/bin/kyverno

  - uses: strip

subpackages:
  - name: kyverno-init-container-fips-${{vars.major-minor-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -Dm755 cmd/kyverno-init/kyvernopre ${{targets.subpkgdir}}/usr/bin/kyvernopre
    dependencies:
      provides:
        - kyverno-init-container-fips=${{package.full-version}}
    test:
      pipeline:
        - runs: |
            kyvernopre --help

  - name: kyverno-reports-controller-fips-${{vars.major-minor-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -Dm755 cmd/reports-controller/reports-controller ${{targets.subpkgdir}}/usr/bin/reports-controller
    dependencies:
      provides:
        - kyverno-reports-controller-fips=${{package.full-version}}
    test:
      pipeline:
        - runs: |
            reports-controller --help

  - name: kyverno-background-controller-fips-${{vars.major-minor-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -Dm755 cmd/background-controller/background-controller ${{targets.subpkgdir}}/usr/bin/background-controller
    dependencies:
      provides:
        - kyverno-background-controller-fips=${{package.full-version}}
    test:
      pipeline:
        - runs: |
            background-controller --help

  - name: kyverno-cleanup-controller-fips-${{vars.major-minor-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -Dm755 cmd/cleanup-controller/cleanup-controller ${{targets.subpkgdir}}/usr/bin/cleanup-controller
    dependencies:
      provides:
        - kyverno-cleanup-controller-fips=${{package.full-version}}
    test:
      pipeline:
        - runs: |
            cleanup-controller --help

  - name: kyverno-cli-fips-${{vars.major-minor-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -Dm755 cmd/cli/kubectl-kyverno/kubectl-kyverno ${{targets.subpkgdir}}/usr/bin/kubectl-kyverno
    dependencies:
      provides:
        - kyverno-cli=${{package.full-version}}
    test:
      pipeline:
        - runs: |
            kubectl-kyverno version
            kubectl-kyverno --help

update:
  enabled: true
  ignore-regex-patterns:
    - "-beta"
    - "-rc"
  git:
    strip-prefix: v
    tag-filter-prefix: v1.12.

test:
  environment:
    environment:
      KYVERNO_NAMESPACE: kyverno-ns
      KYVERNO_SERVICEACCOUNT_NAME: example-serviceaccount
      KYVERNO_DEPLOYMENT: kyverno-deployment
      KYVERNO_POD_NAME: kyverno-pod
      INIT_CONFIG: kyverno-init-config
      METRICS_CONFIG: kyverno-metrics-config
      KUBERNETES_SERVICE_HOST: test-example.net
      KUBERNETES_SERVICE_PORT: 8081
  pipeline:
    - name: "Test kyverno responds to --help without throwing an error"
      runs: |
        kyverno --help
    - name: "Partially mock kyverno and look for known logs"
      runs: |
        mkdir -p /var/run/secrets/kubernetes.io/serviceaccount
        echo "dummy-token" > /var/run/secrets/kubernetes.io/serviceaccount/token

        # Start kyverno in the background and redirect logs to a file
        kyverno > kyverno.log 2>&1 &
        KYVERNO_PID=$!

        # Terminate the kyverno process after we've grabbed some logs
        sleep 5
        kill $KYVERNO_PID
        wait $KYVERNO_PID 2>/dev/null || true

        # Even though kyverno won't be operational, check that it attempted
        # to connect, using the example data.
        if grep -q 'Get "https://test-example.net:8081/api/v1/namespaces/kyverno-ns/' kyverno.log; then
          echo "Test passed: Found expected log output."
        else
          echo "Test failed: Did not find expected log output."
          echo "Kyverno logs:"
          cat kyverno.log
          exit 1
        fi
