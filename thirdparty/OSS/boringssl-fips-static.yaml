package:
  name: boringssl-fips-static
  version: 0.1
  epoch: 1
  description: FIPS validated BoringSSL static libraries
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - busybox
      - binutils
      - build-base
      - libtool
      - python3-dev
      - coreutils
      - patch
      - libstdc++-12-dev
      - curl
      # Even though this is the latest version, our solver does not pick it up.
      - ncurses~6.4_p20230722
      - perl
      - gcc-12-default

pipeline:
  # This comes from envoyproxy/envoy/blob/main/bazel/external/boringssl_fips.genrule_cmd
  # with a few mods to make old Clang works w/ newer cstdlib.
  #
  # This script basically download versions of Cmake, Clang, ninja, Golang, and boringssl
  # from exact versions and the same exact commands as called out by section 12.1 of
  # the NIST doc https://csrc.nist.gov/CSRC/media/projects/cryptographic-module-validation-program/documents/security-policies/140sp4407.pdf
  #
  # A package with this much of version pinning is not very suitable for our
  # infrastructures & tools, because we prefer getting newer/better versions for more
  # security. However, this narrow qualification is somewhat called out in the doc, so
  # we do what needs to be done here.
  - runs: |
      # Older Clang does not know about standard C++ headers locations for newer stdlibc++.
      # We need to be explicit here.
      GCC_INCLUDE=$(find /usr/lib/gcc/${{host.triplet.gnu}} -path '/usr/lib/gcc/*/include/c++' -type d)
      export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$GCC_INCLUDE:$GCC_INCLUDE/${{host.triplet.gnu}}

      # Since the Envoy binary is compiled with -fPIC, we need to do the same
      # for these libraries, or else they won't link, like the errors reported here
      # https://github.com/envoyproxy/envoy/issues/23784
      export CFLAGS="-fPIC"
      export CPPFLAGS="$CFLAGS"
      export CXXFLAGS="$CFLAGS"

      OS=`uname`
      ARCH=`uname -m`

      # Build tools requirements (from section 12.1 of https://csrc.nist.gov/CSRC/media/projects/cryptographic-module-validation-program/documents/security-policies/140sp4407.pdf):
      # - Clang compiler version 12.0.0 (https://releases.llvm.org/download.html)
      # - Go programming language version 1.16.5 (https://golang.org/dl/)
      # - Ninja build system version 1.10.2 (https://github.com/ninja-build/ninja/releases)
      # - Cmake version 3.20.1 (https://cmake.org/download/)

      # Override $PATH for build tools, to avoid picking up anything else.
      export PATH="/usr/bin:/bin"

      # Clang
      VERSION=12.0.0

      # The release.llvm.org page from the NIST doc does not have consistent
      # OS for x86_64-linux and aarch64-linux builds. This is why we have to download
      # from `gnu` for one and `gnu-ubuntu` for the other.
      if [ "$ARCH" == "x86_64" ]; then
        PLATFORM="x86_64-linux-gnu-ubuntu-20.04"
        SHA256=a9ff205eb0b73ca7c86afc6432eed1c2d49133bd0d49e47b15be59bbf0dd292e
      else
        PLATFORM="aarch64-linux-gnu"
        SHA256=d05f0b04fb248ce1e7a61fcd2087e6be8bc4b06b2cc348792f383abf414dec48
        # Sadly, this pre-compiled Clang was compiled w/ libtinfo 5. However,
        # during this build, the ncurses/terminfo libs didn't matter.
        #
        # We create a symlink here so that Clang does not panic, but we
        # probably need to create a separate version stream for ncurses-5, if
        # we want to make this less apalling. However, as the passing test
        # suite suggests this makes no difference.
        ln -sf /usr/lib/libtinfo.so.6 /usr/lib/libtinfo.so.5
      fi

      echo "Downloading Clang version $VERSION"
      curl -sLO --progress-bar --retry 3 \
        https://github.com/llvm/llvm-project/releases/download/llvmorg-"$VERSION"/clang+llvm-"$VERSION"-"$PLATFORM".tar.xz
      tar xf clang+llvm-"$VERSION"-"$PLATFORM".tar.xz

      export HOME="$PWD"
      printf "set(CMAKE_C_COMPILER \"clang\")\nset(CMAKE_CXX_COMPILER \"clang++\")\n" > ${HOME}/toolchain
      export PATH="$PWD/clang+llvm-$VERSION-$PLATFORM/bin:$PATH"

      if [ `clang --version | head -1 | awk '{print $3}'` != "$VERSION" ]; then
        echo "ERROR: Clang version doesn't match."
        exit 1
      fi

      # Go
      VERSION=1.16.5
      if [ "$ARCH" == "x86_64" ]; then
        PLATFORM="linux-amd64"
        SHA256=b12c23023b68de22f74c0524f10b753e7b08b1504cb7e417eccebdd3fae49061
      else
        PLATFORM="linux-arm64"
        SHA256=d5446b46ef6f36fdffa852f73dfbbe78c1ddf010b99fa4964944b9ae8b4d6799
      fi

      echo "Downloading Go"
      curl -sLO --progress-bar --retry 5 https://dl.google.com/go/go"$VERSION"."$PLATFORM".tar.gz
      echo "$SHA256" go"$VERSION"."$PLATFORM".tar.gz | sha256sum --check
      tar xf go"$VERSION"."$PLATFORM".tar.gz

      export GOPATH="$PWD/gopath"
      export GOROOT="$PWD/go"
      export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"

      if [ `go version | awk '{print $3}'` != "go$VERSION" ]; then
        echo "ERROR: Go version doesn't match."
        exit 1
      fi

      # Ninja
      VERSION=1.10.2
      echo "Downloading Ninja version $VERSION"
      SHA256=ce35865411f0490368a8fc383f29071de6690cbadc27704734978221f25e2bed
      curl -sLO --progress-bar --retry 5 \
        https://github.com/ninja-build/ninja/archive/refs/tags/v"$VERSION".tar.gz
      echo "$SHA256" v"$VERSION".tar.gz | sha256sum --check
      tar -xvf v"$VERSION".tar.gz
      cd ninja-"$VERSION"
      python3 ./configure.py --bootstrap

      export PATH="$PWD:$PATH"

      if [ `ninja --version` != "$VERSION" ]; then
        echo "ERROR: Ninja version doesn't match."
        exit 1
      fi
      cd ..

      # CMake
      VERSION=3.20.1
      echo "Downloading Cmake version $VERSION"
      if [ "$ARCH" == "x86_64" ]; then
        PLATFORM="linux-x86_64"
        SHA256=b8c141bd7a6d335600ab0a8a35e75af79f95b837f736456b5532f4d717f20a09
      else
        PLATFORM="linux-aarch64"
        SHA256=5ad1f8139498a1956df369c401658ec787f63c8cb4e9759f2edaa51626a86512
      fi

      curl -sLO --progress-bar --retry 5 \
        https://github.com/Kitware/CMake/releases/download/v"$VERSION"/cmake-"$VERSION"-"$PLATFORM".tar.gz
      echo "$SHA256" cmake-"$VERSION"-"$PLATFORM".tar.gz | sha256sum --check
      tar xf cmake-"$VERSION"-"$PLATFORM".tar.gz

      export PATH="$PWD/cmake-$VERSION-$PLATFORM/bin:$PATH"

      if [ `cmake --version | head -n1` != "cmake version $VERSION" ]; then
        echo "ERROR: CMake version doesn't match."
        exit 1
      fi

      # Download boring_ssl, at commit 853ca1ea1168dff08011e5d42d94609cc0ca2e27 as
      # instructed in section 12 of the FIPS validation document.
      export COMMIT=853ca1ea1168dff08011e5d42d94609cc0ca2e27
      echo "Downloading BoringSSL @ $COMMIT"
      curl -sLO --progress-bar --retry 5 \
        https://commondatastorage.googleapis.com/chromium-boringssl-fips/boringssl-$COMMIT.tar.xz
      tar xf boringssl-$COMMIT.tar.xz

      # Build BoringSSL.
      cd boringssl
      mkdir build && cd build && cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=${HOME}/toolchain -DFIPS=1 -DCMAKE_BUILD_TYPE=Release ..
      ninja

      # Run the crypto_test according to the FIPS doc.
      ./crypto/crypto_test

      # Verify correctness of the FIPS build.
      if [ `tool/bssl isfips` != "1" ]; then
        echo "ERROR: BoringSSL tool didn't report FIPS build."
        exit 1
      else
        echo "PASSED: BoringSSL tool reported FIPS build."
      fi

      mkdir -p ${{targets.destdir}}/usr/lib
      cp ./crypto/libcrypto.a \
         ./ssl/libssl.a \
         ${{targets.destdir}}/usr/lib

subpackages:
  # Since the location of crypto/libcrypto.a and ssl/libssl.a overlaps
  # with what openssl-dev provides, in some cases we want to put them
  # in a different location (for example cilium-fips) to avoid conflicts.
  - name: boringssl-fips-static-compat
    description: "crypto/libcrypto.a and ssl/libssl.a in non-default locations"
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib/${{package.name}}
          cd boringssl/build
          cp ./crypto/libcrypto.a \
             ./ssl/libssl.a \
             ${{targets.subpkgdir}}/usr/lib/${{package.name}}

update:
  enabled: false
  exclude-reason: |
    There is no way we can auto update this. We can manually update once in a while when there is a new validation doc for OpenSSL.
