package:
  name: adoptium-openjdk-11
  version: 11.0.25
  epoch: 0
  description: "Adoptium OpenJDK 11"
  copyright:
    - license: GPL-2.0-only
  dependencies:
    runtime:
      - adoptium-openjdk-11-jre

environment:
  contents:
    packages:
      - alsa-lib-dev
      - autoconf
      - automake
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - cups-dev
      - file
      - fontconfig-dev
      - freetype-dev
      - giflib-dev
      - lcms2-dev
      - libffi-dev
      - libjpeg-turbo-dev
      - libx11-dev
      - libxext-dev
      - libxi-dev
      - libxrandr-dev
      - libxrender-dev
      - libxt-dev
      - libxtst-dev
      - openjdk-10-default-jdk
      - zip

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/adoptium/jdk11u
      tag: jdk-${{package.version}}+2_adopt
      expected-commit: e1a43b11de967e5416a11131c300bac3f5fc9f7a

  - uses: patch
    with:
      patches: FixNullPtrCast.patch

  - runs: chmod +x configure

  # Note that despite using --with-extra-cflags, --with-extra-cxxflags, and
  # --with-extra-ldflags, the configure still produces warnings like:
  # https://github.com/wolfi-dev/os/issues/18747
  #
  # # NOTE: --disable-hotspot-gtest = Disable flakey tests for now as we're seeing builds hang on aarch64.
  #
  - uses: autoconf/configure
    with:
      opts: |
        --with-extra-cflags="$CFLAGS" \
        --with-extra-cxxflags="$CXXFLAGS" \
        --with-extra-ldflags="$LDFLAGS" \
        --with-boot-jdk=/usr/lib/jvm/java-10-openjdk \
        --prefix=/usr/lib/jvm/java-11-adoptium \
        --with-vendor-name=wolfi \
        --with-vendor-url=https://wolfi.dev \
        --with-vendor-bug-url=https://github.com/wolfi-dev/os/issues \
        --with-version-opt="wolfi-r${{package.epoch}}" \
        --disable-warnings-as-errors \
        --disable-precompiled-headers \
        --enable-dtrace=no \
        --with-zlib=system \
        --with-debug-level=release \
        --with-native-debug-symbols=internal \
        --with-jvm-variants=server \
        --with-jtreg=no  \
        --with-libpng=system \
        --with-jvm-variants=server \
        --with-libjpeg=system \
        --with-giflib=system \
        --with-lcms=system \
        --with-version-string="" \
        --disable-hotspot-gtest

  - runs: make jdk-image

  # Check we built something valid
  - runs: |
      _java_bin="./build/*-server-release/images/jdk/bin"

      $_java_bin/javac -d . HelloWorld.java
      $_java_bin/java HelloWorld

  - runs: |
      _java_home="usr/lib/jvm/java-11-adoptium"

      mkdir -p "${{targets.destdir}}"/$_java_home
      cp -r build/*-server-release/images/jdk/* "${{targets.destdir}}"/$_java_home
      rm "${{targets.destdir}}"/$_java_home/lib/src.zip

subpackages:
  - name: "${{package.name}}-dbg"
    description: "OpenJDK 11 Java Debug Symbols"
    pipeline:
      - uses: split/debug
    dependencies:
      runtime:
        - adoptium-openjdk-11

  - name: "${{package.name}}-jre"
    description: "OpenJDK 11 Java Runtime Environment"
    dependencies:
      runtime:
        - freetype
        - libfontconfig1
        - adoptium-openjdk-11-jre-base
    pipeline:
      - runs: |
          _java_home="usr/lib/jvm/java-11-adoptium"

          mkdir -p "${{targets.subpkgdir}}"/$_java_home/lib
          mv "${{targets.destdir}}"/$_java_home/lib/libawt_xawt.so \
              "${{targets.destdir}}"/$_java_home/lib/libfontmanager.so \
              "${{targets.destdir}}"/$_java_home/lib/libjavajpeg.so \
              "${{targets.destdir}}"/$_java_home/lib/libjawt.so \
              "${{targets.destdir}}"/$_java_home/lib/libjsound.so \
              "${{targets.destdir}}"/$_java_home/lib/liblcms.so \
              "${{targets.destdir}}"/$_java_home/lib/libsplashscreen.so \
              "${{targets.subpkgdir}}"/$_java_home/lib

  - name: "${{package.name}}-jre-base"
    description: "OpenJDK 11 Java Runtime Environment (headless)"
    dependencies:
      runtime:
        - java-common
        - java-cacerts
    pipeline:
      - runs: |
          _java_home="usr/lib/jvm/java-11-adoptium"

          mkdir -p "${{targets.subpkgdir}}"/$_java_home
          mv "${{targets.destdir}}"/$_java_home/lib \
             "${{targets.subpkgdir}}"/$_java_home

          mkdir -p "${{targets.subpkgdir}}"/$_java_home/bin
          for i in java \
                    jfr \
                    jrunscript \
                    keytool \
                    rmiregistry; do
            mv "${{targets.destdir}}"/$_java_home/bin/$i "${{targets.subpkgdir}}"/$_java_home/bin/$i
          done

          mv "${{targets.destdir}}"/$_java_home/legal "${{targets.subpkgdir}}"/$_java_home
          mv "${{targets.destdir}}"/$_java_home/conf "${{targets.subpkgdir}}"/$_java_home
          mv "${{targets.destdir}}"/$_java_home/release "${{targets.subpkgdir}}"/$_java_home
          cp ASSEMBLY_EXCEPTION \
              LICENSE \
              README.md \
             "${{targets.subpkgdir}}"/$_java_home

          # symlink to shared java cacerts store
          rm -f "${{targets.subpkgdir}}"/$_java_home/lib/security/cacerts
          ln -sf /etc/ssl/certs/java/cacerts \
            "${{targets.subpkgdir}}"/$_java_home/lib/security/cacerts

          # symlink for `java-common` to work (which expects jre in $_java_home/jre)
          ln -sf . "${{targets.subpkgdir}}/$_java_home/jre"

  - name: "${{package.name}}-jmods"
    description: "OpenJDK 11 jmods"
    dependencies:
      provides:
        - adoptium-openjdk-jmods=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-adoptium
          mv "${{targets.destdir}}"/usr/lib/jvm/java-11-adoptium/jmods \
             "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-adoptium

  - name: "${{package.name}}-doc"
    description: "OpenJDK 11 Documentation"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-adoptium
          mv "${{targets.destdir}}"/usr/lib/jvm/java-11-adoptium/man \
             "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-adoptium

  - name: "${{package.name}}-demos"
    description: "OpenJDK 11 Demos"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-adoptium
          mv "${{targets.destdir}}"/usr/lib/jvm/java-11-adoptium/demo \
             "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-adoptium

  - name: "${{package.name}}-default-jvm"
    description: "Use the adoptium-openjdk-11 JVM as the default JVM"
    dependencies:
      runtime:
        - adoptium-openjdk-11-jre
      provides:
        - default-jvm=1.11
        - default-jvm-lts=1.11
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm
          ln -sf java-11-adoptium "${{targets.subpkgdir}}"/usr/lib/jvm/default-jvm

  - name: "${{package.name}}-default-jdk"
    description: "Use the adoptium-openjdk-11 JVM as the default JVM with the JDK installed"
    dependencies:
      runtime:
        - adoptium-openjdk-11-default-jvm
        - adoptium-openjdk-11
      provides:
        - default-jdk=1.11

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-default-jdk
    environment:
      JAVA_HOME: /usr/lib/jvm/java-11-adoptium
  pipeline:
    - name: "Java version Test"
      runs: |
        java -version
    # Create and test the Hello World file
    - name: "Create Hello World File"
      working-directory: basic
      runs: |
        cat <<EOL > HelloWorld.java
        public class HelloWorld {
          public static void main(String[] args) {
            System.out.println("Hello World!");
          }
        }
        EOL
    - name: "Compile and Run Hello World"
      working-directory: basic
      runs: |
        javac HelloWorld.java
        java HelloWorld | grep -qi "Hello World!"
