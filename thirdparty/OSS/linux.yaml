package:
  name: linux
  version: "6.13"
  epoch: 0
  description: "the linux kernel"
  copyright:
    - license: GPL-2.0
  resources:
    cpu: 8
    memory: 24Gi

environment:
  contents:
    packages:
      - bison
      - build-base
      - busybox
      - ca-certificates-bundle
      - coreutils
      - diffutils
      - elfutils
      - elfutils-dev
      - findutils
      - flex
      - openssl-dev
      - perl
      - python3
      - wolfi-base
      - gmp
      - gmp-dev
      - mpc
      - mpc-dev
      - mpfr
      - mpfr-dev
      - zstd

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/gregkh/linux
      tag: v${{package.version}}
      expected-commit: ffd294d346d185b70e28b1a28abe367bbfe53c04

  - runs: |
      set -x
      # Make a kernel
      # TODO: Much work to be done, tailoring a kernel config (or, more likely, a set of kernel configs)
      # TODO: But as a starting point, let's start with the default config, plus kvm_guest, plus hardening options
      make defconfig
      make hardening.config
      make kvm_guest.config
      make xen.config

      # Enable fuse and overlayfs stuff for dockerd to work
      cat .config-fuse >> .config

      # Enable iptables stuff for dockerd to work
      cat .config-iptables >> .config

      # Enable hyperv stuff for Azure to work
      cat .config-azure >> .config

      # Enable XFS
      cat .config-xfs >> .config

      # Remove early warnings for missing /etc/target
      sed -i 's|CONFIG_TARGET_CORE=y|# CONFIG_TARGET_CORE is not set|g' .config

      # Enable modules by default
      sed -i 's|=m|=y|g' .config

      #echo CONFIG_VERSION_SIGNATURE=\"Chainguard Wolfi Linux $(uname -m)-${{package.full-version}}\" >> .config
      # Build the Linux Kernel
      make -j $(nproc)
      mkdir -p ${{targets.destdir}}/boot
      cp -a .config ${{targets.destdir}}/boot/config-$(uname -m)-${{package.full-version}}
      chmod 644 ${{targets.destdir}}/boot/config-$(uname -m)-${{package.full-version}}
      cp -a $(find . -type f \( -name bzImage -or -name Image.gz \) -print -quit) ${{targets.destdir}}/boot/vmlinuz-$(uname -m)-${{package.full-version}}
      chmod 644 ${{targets.destdir}}/boot/vmlinuz-$(uname -m)-${{package.full-version}}
      ( cd ${{targets.destdir}}/boot && ln -sf vmlinuz-$(uname -m)-${{package.full-version}} vmlinuz )

vars:
  root-partition-uuid: "33333333-3333-3333-3333-333333333333"

subpackages:
  - name: "linux-boot-installed"
    description: "Linux kernel (installed for EFI)"
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/boot/efi/chainguard/${{package.version}}/
      - if: ${{build.arch}} == 'aarch64'
        runs: |
          # Apparently on aarch64 the kernel cannot be compressed, so we forcibly decompress it here.
          gunzip --stdout ${{targets.destdir}}/boot/vmlinuz > ${{targets.subpkgdir}}/boot/efi/chainguard/${{package.version}}/linux
      - if: ${{build.arch}} == 'x86_64'
        runs: |
          cp ${{targets.destdir}}/boot/vmlinuz ${{targets.subpkgdir}}/boot/efi/chainguard/${{package.version}}/linux

  - name: "linux-boot-configuration"
    description: "Linux kernel (installed for EFI)"
    dependencies:
      runtime:
        # Use the installed systemd boot-loader, the installed kernel,
        # and then this package configures the boot-loader to launch
        # this version of the installed kernel.
        # TODO: Should this be its own package, or should we fold it into
        # linux-boot-installed?
        - systemd-boot-installed
        - linux-boot-installed
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/boot/efi/loader/entries/
          cat > ${{targets.subpkgdir}}/boot/efi/loader/entries/chainguard-${{package.version}}.conf <<EOF
          # Boot Loader Specification type#1 entry
          title      Chainguard
          version    ${{package.version}}
          sort-key   chainguard
          # The root argument must match the form documented (only) here:
          # https://github.com/torvalds/linux/blob/3022e9d0/block/early-lookup.c#L217
          options    root=PARTUUID=${{vars.root-partition-uuid}} console=ttyS0 net.ifnames=0 biosdevname=0
          linux      /chainguard/${{package.version}}/linux
          EOF

          # In addition to noting the root partition above, configure /etc/fstab as well.
          mkdir -p ${{targets.subpkgdir}}/etc
          echo "/dev/root / auto defaults 0 1" > "${{targets.subpkgdir}}/etc/fstab"

test:
  environment:
    contents:
      packages:
        - qemu
  pipeline:
    - name: Test Basic Boot
      runs: |
        set -x
        # Just a dumb test for now...see if we have a file at /boot/vmlinuz
        [ -e /boot/vmlinuz ]
        # Launch qemu, point to our kernel, put kernel boot console on standard out, exit on panic,
        # don't reboot, and make sure we get to the step where we're trying to mount a rootfs
        # TODO: we could go even further if we built an initrd and maybe ran the LTP...
        arch=$(uname -m)
        case "$arch" in
          x86_64)
            qemu-system-x86_64 -kernel /boot/vmlinuz -m 1G -nographic -append "console=ttyS0 panic=1" -no-reboot | grep -q "Unable to mount root fs"
          ;;
          aarch64)
            qemu-system-aarch64 -kernel /boot/vmlinuz -m 1G -cpu max -machine virt -nographic -no-reboot -append "panic=1" | grep -q "Unable to mount root fs"
          ;;
        esac
    - name: Test for XFS
      runs: |
        set -x
        # Just a dumb test for now...see if we have a file at /boot/vmlinuz
        [ -e /boot/vmlinuz ]
        # Launch qemu, point to our kernel, put kernel boot console on standard out, exit on panic,
        # don't reboot, and make sure we get to the step where we're trying to mount a rootfs
        # TODO: we could go even further if we built an initrd and maybe ran the LTP...
        arch=$(uname -m)
        case "$arch" in
          x86_64)
            qemu-system-x86_64 -kernel /boot/vmlinuz -m 1G -nographic -append "console=ttyS0 panic=1" -no-reboot |  grep -q "xfs"
          ;;
          aarch64)
            qemu-system-aarch64 -kernel /boot/vmlinuz -m 1G -cpu max -machine virt -nographic -no-reboot -append "panic=1" | grep -q "xfs"
          ;;
        esac

update:
  enabled: true
  github:
    identifier: gregkh/linux
    use-tag: true
    strip-prefix: v
    tag-filter: v
