package:
  name: corretto-21
  version: 21.0.5.11.1
  epoch: 0
  description:
  copyright:
    - license: GPL-2.0-only
  dependencies:
    runtime:
      - java-common
      - zlib

var-transforms:
  - from: ${{package.version}}
    match: ^(\d+\.){3}(\d+)\.\d+$
    replace: "$2"
    to: build-version

environment:
  contents:
    packages:
      - alsa-lib-dev
      - autoconf
      - automake
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - cups-dev
      - file
      - fontconfig-dev
      - java-cacerts
      - libx11-dev
      - libxext-dev
      - libxi-dev
      - libxrandr-dev
      - libxrender-dev
      - libxt-dev
      - libxtst-dev
      - openjdk-21-default-jdk
      - zip
  environment:
    # This is needed to work around the error date 1970-01-01T00:00:00Z is not within the valid range 1980-01-01T00:00:02Z to 2099-12-31T23:59:59Z
    SOURCE_DATE_EPOCH: 315532900

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/corretto/corretto-21
      tag: ${{package.version}}
      expected-commit: 33cb120928fa0538919542d0948827cdc1a3fc51

  - working-directory: /home/build/googletest
    pipeline:
      - uses: fetch
        with:
          uri: https://github.com/google/googletest/archive/v1.13.0.tar.gz
          expected-sha512: 70c0cfb1b4147bdecb467ecb22ae5b5529eec0abc085763213a796b7cdbd81d1761d12b342060539b936fa54f345d33f060601544874d6213fdde79111fa813e

  - runs: chmod +x configure

  # Note that despite using --with-extra-cflags, --with-extra-cxxflags, and
  # --with-extra-ldflags, the configure still produces warnings like:
  # https://github.com/wolfi-dev/os/issues/18747
  - uses: autoconf/configure
    with:
      opts: |
        --with-extra-cflags="$CFLAGS" \
        --with-extra-cxxflags="$CXXFLAGS" \
        --with-extra-ldflags="$LDFLAGS" \
        --with-boot-jdk=/usr/lib/jvm/java-21-openjdk \
        --prefix=/usr/lib/jvm/java-21-amazon-corretto \
        --disable-warnings-as-errors \
        --disable-precompiled-headers \
        --enable-dtrace=no \
        --with-zlib=system \
        --with-debug-level=release \
        --with-native-debug-symbols=internal \
        --with-jvm-variants=server \
        --with-jtreg=no \
        --with-jvm-variants=server \
        --with-gtest="/home/build/googletest" \
        --with-version-string="" \
        --with-freetype=bundled \
        --with-version-build=${{vars.build-version}} \
        --with-vendor-version-string=Corretto-${{package.version}} \
        --with-version-opt=LTS \
        --with-vendor-bug-url=https://github.com/wolfi-dev/os/issues \
        --with-vendor-vm-bug-url=https://github.com/wolfi-dev/os/issues \
        --with-vendor-name=Chainguard \
        --with-vendor-url=https://chainguard.dev

  - runs: make jdk-image legacy-jre-image

  # Check we built something valid
  - runs: |
      _java_bin="./build/*-server-release/images/jdk/bin"

      $_java_bin/javac -d . HelloWorld.java
      $_java_bin/java HelloWorld

      # NOTE: Disable flakey tests for now as we're seeing builds hang on aarch64
      # # run the gtest unittest suites
      # make test-hotspot-gtest

  - runs: |
      _java_home="usr/lib/jvm/java-21-amazon-corretto"

      mkdir -p "${{targets.destdir}}"/$_java_home
      cp -r build/*-server-release/images/jdk/* "${{targets.destdir}}"/$_java_home
      rm "${{targets.destdir}}"/$_java_home/lib/src.zip

      # copy to shared java cacerts store
      rm -f "${{targets.contextdir}}"/$_java_home/lib/security/cacerts
      cp /etc/ssl/certs/java/cacerts \
        "${{targets.contextdir}}"/$_java_home/lib/security/cacerts

subpackages:
  - name: "corretto-21-dbg"
    description: "Corretto 21 Java Debug Symbols"
    pipeline:
      - uses: split/debug
    dependencies:
      runtime:
        - corretto-21

  - name: "corretto-21-default-policy"
    description: "Corretto 21 default policy"
    dependencies:
      provides:
        - corretto-default-policy=${{package.full-version}}
    pipeline:
      - runs: |
          _java_security="usr/lib/jvm/java-21-amazon-corretto/conf/security"
          mkdir -p "${{targets.subpkgdir}}"/$_java_security

          # Move security policy
          mv build/*-server-release/images/jre/conf/security/java.security \
            "${{targets.subpkgdir}}"/$_java_security/java.security

  - name: "corretto-21-jre"
    description: "Corretto 21 Java Runtime Environment"
    dependencies:
      runtime:
        - corretto-21-default-policy
        - java-common
        - zlib
    pipeline:
      - runs: |
          _java_home="usr/lib/jvm/java-21-amazon-corretto"

          mkdir -p "${{targets.subpkgdir}}"/$_java_home
          cp -r build/*-server-release/images/jre/* "${{targets.subpkgdir}}"/$_java_home

          # copy to shared java cacerts store
          rm -f "${{targets.subpkgdir}}"/$_java_home/lib/security/cacerts
          cp /etc/ssl/certs/java/cacerts \
            "${{targets.subpkgdir}}"/$_java_home/lib/security/cacerts

          # symlink for `java-common` to work (which expects jre in $_java_home/jre)
          ln -sf . "${{targets.subpkgdir}}/$_java_home/jre"

  - name: "corretto-21-jmods"
    description: "Corretto 21 jmods"
    dependencies:
      provides:
        - corretto-jmods=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm/java-21-amazon-corretto
          mv "${{targets.destdir}}"/usr/lib/jvm/java-21-amazon-corretto/jmods \
             "${{targets.subpkgdir}}"/usr/lib/jvm/java-21-amazon-corretto

  - name: "corretto-21-doc"
    description: "Corretto 21 Documentation"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm/java-21-amazon-corretto
          mv "${{targets.destdir}}"/usr/lib/jvm/java-21-amazon-corretto/man \
             "${{targets.subpkgdir}}"/usr/lib/jvm/java-21-amazon-corretto

  - name: "corretto-21-demos"
    description: "Corretto 21 Demos"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm/java-21-amazon-corretto
          mv "${{targets.destdir}}"/usr/lib/jvm/java-21-amazon-corretto/demo \
             "${{targets.subpkgdir}}"/usr/lib/jvm/java-21-amazon-corretto

  - name: "corretto-21-default-jvm"
    description: "Use the corretto-21 JVM as the default JVM"
    dependencies:
      runtime:
        - corretto-21-jre
      provides:
        - corretto-default-jvm=1.21
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm
          ln -sf java-21-amazon-corretto "${{targets.subpkgdir}}"/usr/lib/jvm/default-jvm

  - name: "corretto-21-default-jdk"
    description: "Use the corretto-21 JVM as the default JVM with the JDK installed"
    dependencies:
      runtime:
        - corretto-21
      provides:
        - corretto-default-jdk=1.21
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm
          ln -sf java-21-amazon-corretto "${{targets.subpkgdir}}"/usr/lib/jvm/default-jvm

update:
  enabled: true
  github:
    identifier: corretto/corretto-21
    use-tag: true

test:
  environment:
    contents:
      packages:
        - corretto-21-default-jdk
        - corretto-21-jmods
        - java-common
    environment:
      JAVA_HOME: /usr/lib/jvm/java-21-amazon-corretto
  pipeline:
    # Test a basic Hello World
    - working-directory: basic
      runs: |
        javac HelloWorld.java
        java HelloWorld | grep -qi "Hello World!"
    # Test a basic HTTP connection
    - working-directory: basic
      runs: |
        javac RequestTest.java
        java RequestTest | grep -qi "Successfully connected to example.org"
    # Test modules
    - working-directory: advanced/module-project
      runs: |
        mkdir output
        javac -d output --module-source-path modules $(find modules -name "*.java")

        # Create a jar with the compiled classes
        jar --verbose --create --file app.jar \
          --main-class dev.chainguard.module.main.Main \
          --module-version 1.0 \
          -C output/test.modules . \
          -C output/main.app .

        # Test the jar
        java -jar app.jar

        # Test jlink
        jlink --verbose --module-path "app.jar:$JAVA_HOME/jmods" \
          --add-modules test.modules \
          --output test-project-jre

        # Test custom JRE
        test-project-jre/bin/java -jar app.jar
