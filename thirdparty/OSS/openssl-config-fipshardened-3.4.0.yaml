package:
  name: openssl-config-fipshardened-3.4.0
  version: 3.4.0
  epoch: 5
  description: "Hardened FIPS cryptographic configuration policy for OpenSSL"
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - openssl-provider-fips-3.4.0
      - openssl-fips-test
    replaces:
      - openssl
      - openssl-config<3.4.0
    replaces-priority: 10

environment:
  contents:
    packages:
      - busybox

pipeline:
  - runs: |
      mkdir -p "${{targets.destdir}}"/etc/ssl
      cp openssl.cnf "${{targets.destdir}}"/etc/ssl/openssl.cnf

      mkdir -p "${{targets.destdir}}"/etc/ssh/ssh_config.d/
      cp 10-ssh-fips.conf "${{targets.destdir}}"/etc/ssh/ssh_config.d/
      chmod 0644 "${{targets.destdir}}"/etc/ssh/ssh_config.d/10-ssh-fips.conf

test:
  environment:
    contents:
      packages:
        - curl
        - gdb
        - git
        - openssh-client
        - openssl
        - openssl-dbg
        - openssl-provider-fips-3.4.0-dbg
        - wget
  pipeline:
    - name: Check fips test
      runs: |
        openssl-fips-test
    - name: Verify curl still works
      runs: |
        ! curl https://expired.badssl.com/
        curl -I https://github.com/openssl/openssl
    - name: Verify git still works
      runs: |
        git ls-remote --exit-code https://github.com/openssl/openssl refs/tags/openssl-3.3.0
    - name: Verify wget still works
      runs: |
        ! wget https://expired.badssl.com/
        wget -O /dev/null https://github.com/openssl/openssl
    - name: Verify only jitter entropy source is in use
      runs: |
        # Possibly python gdb would be easier to read
        cat <<EOF >openssl.gdb
        set pagination off
        set logging file gdb.log
        set logging on
        set width 0
        set height 0
        set verbose off
        set breakpoint pending on
        break get_jitter_random_value
        commands 1
          continue
        end
        break syscall_random
        commands 2
          continue
        end
        run rand -hex 8
        run genrsa -out /dev/null
        run ecparam -name prime256v1 -genkey
        run genpkey -algorithm ed25519
        EOF
        gdb --batch --command ./openssl.gdb openssl
        # Assert that jitter entropy is used
        grep -q 'Breakpoint 1.1,' gdb.log || exit 1
        # Assert that getrandom syscall wrapper is not used
        grep -q 'Breakpoint 2,' gdb.log && exit 1
    - name: Verify ssh is FIPS hardened
      runs: |
        ssh -v -G localhost >ssh.log 2>&1
        grep '^debug1: Reading configuration data /etc/ssh/ssh_config.d/10-ssh-fips.conf' ssh.log
        grep '^ciphers aes128-gcm@openssh.com,aes256-gcm@openssh.com$' ssh.log
        grep '^macs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512$' ssh.log
        grep '^kexalgorithms ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256$' ssh.log
        grep '^requiredrsasize 2048$' ssh.log
    - name: docker-dind certificate generation
      runs: |
        # Distilled from dockerd-entrypoint.sh
        set -x
        tmpdir="$(mktemp -d)"
        trap "rm -rf "$tmpdir"" EXIT
        rm -rf "$tmpdir/certs/"
        mkdir -p "$tmpdir/certs/ca"
        openssl genrsa -out "$tmpdir/certs/ca/key.pem" 4096
        openssl req -new -key "$tmpdir/certs/ca/key.pem" \
          -out "$tmpdir/certs/ca/cert.pem" -subj '/CN=docker:dind CA' \
          -x509 -days 825
        mkdir -p "$tmpdir/certs/server"
        openssl genrsa -out "$tmpdir/certs/server/key.pem" 4096
        openssl req -new -key "$tmpdir/certs/server/key.pem" \
          -out "$tmpdir/certs/server/csr.pem" -subj '/CN=docker:dind server'
        cat << EOF >"$tmpdir/certs/server/openssl.cnf"
        [ x509_exts ]
        subjectAltName = DNS:b51ddd7b8dcd,DNS:docker,DNS:localhost,IP:127.0.0.1,IP:172.17.0.4,IP:::1
        EOF
        openssl x509 -req -in "$tmpdir/certs/server/csr.pem"\
          -CA "$tmpdir/certs/ca/cert.pem" -CAkey "$tmpdir/certs/ca/key.pem" \
          -CAcreateserial -out "$tmpdir/certs/server/cert.pem" \
          -days 825 -extfile "$tmpdir/certs/server/openssl.cnf" \
          -extensions x509_exts
        cp "$tmpdir/certs/ca/cert.pem" "$tmpdir/certs/server/ca.pem"
        openssl verify -CAfile "$tmpdir/certs/server/ca.pem" \
          "$tmpdir/certs/server/cert.pem"

update:
  enabled: true
  release-monitor:
    identifier: 2566
