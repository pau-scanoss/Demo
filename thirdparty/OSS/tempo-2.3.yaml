package:
  name: tempo-2.3
  version: 2.3.1
  epoch: 10
  description: Grafana Tempo is a high volume, minimal dependency distributed tracing backend.
  copyright:
    - license: AGPL-3.0-or-later

var-transforms:
  - from: ${{package.name}}
    match: \W\d
    replace:
    to: mangled-package-version

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - go-1.22

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 9398fd620de84f8bf61ca915a98c64a793f6c8ca
      repository: https://github.com/grafana/tempo
      tag: v${{package.version}}

  - uses: go/bump
    with:
      deps: google.golang.org/protobuf@v1.33.0 github.com/prometheus/alertmanager@v0.25.1 go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc@v0.46.0 go.opentelemetry.io/otel/sdk@v1.20.0 go.opentelemetry.io/otel/bridge/opentracing@v1.20.0 github.com/mostynb/go-grpc-compression@v1.2.3 github.com/Azure/azure-sdk-for-go/sdk/azidentity@v1.6.0 github.com/rs/cors@v1.11.0 github.com/golang-jwt/jwt/v4@v4.5.1 golang.org/x/crypto@v0.31.0 golang.org/x/net@v0.33.0

  - runs: |
      make ${{vars.mangled-package-version}}
      install -Dm755 bin/linux/${{vars.mangled-package-version}}-$(go env GOARCH) ${{targets.destdir}}/usr/bin/${{vars.mangled-package-version}}

  - uses: strip

data:
  - name: components
    items:
      query: query
      vulture: vulture
      cli: cli

subpackages:
  - range: components
    name: "${{package.name}}-${{range.key}}"
    pipeline:
      - runs: |
          make ${{vars.mangled-package-version}}-${{range.key}}
          install -Dm755 bin/linux/${{vars.mangled-package-version}}-${{range.key}}-$(go env GOARCH) ${{targets.subpkgdir}}/usr/bin/${{vars.mangled-package-version}}-${{range.key}}
      - uses: strip

update:
  enabled: true
  github:
    identifier: grafana/tempo
    strip-prefix: v
    tag-filter: v2.3

test:
  environment:
    contents:
      packages:
        - curl
  pipeline:
    - name: Smoke test for Tempo binary
      runs: |
        tempo --version
        tempo --help
    - name: Test Tempo server start
      runs: |
        # Create a simple tempo.yaml config file
        cat <<EOF > tempo.yaml
        auth_enabled: false
        server:
          http_listen_port: 3200
        distributor:
          receivers:
            jaeger:
              protocols:
                thrift_compact:
        ingester:
          trace_idle_period: 10s
          max_block_bytes: 1048576
        storage:
          trace:
            backend: local
            local:
              path: /tmp/tempo/traces
        EOF

        tempo start -config.file=tempo.yaml &

        attempts=0
        until curl -f http://localhost:3200/ready || [ $attempts -eq 5 ]; do
          sleep 10
          attempts=$((attempts+1))
        done
        if [ $attempts -eq 5 ]; then exit 1; fi
